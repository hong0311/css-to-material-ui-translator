{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","withStyles","title","width","fontSize","cssMultilineInput","fontFamily","margin","paper","backgroundColor","height","textAlign","overflow","props","string","useState","CSSCode","setCSSCode","classes","className","Typography","TextField","variant","id","label","multiline","rowsMax","rows","value","onChange","e","target","replace","c","toUpperCase","Boolean","window","location","hostname","match","theme","createMuiTheme","palette","primary","main","secondary","light","contrastText","typography","ReactDOM","render","MuiThemeProvider","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+KAAAA,EAAOC,QAAU,IAA0B,kC,qJC6C5BC,kBAAW,CACxBC,MAAO,CACLC,MAAO,OACPC,SAAU,OAGZC,kBAAmB,CACjBC,WAAY,cACZH,MAAO,MACPI,OAAQ,WAEVC,MAAO,CACLC,gBAAiB,UACjBN,MAAO,OACPO,OAAQ,QACRC,UAAW,SACXC,SAAU,WAhBCX,EAnCf,SAAaY,GAAQ,IAJFC,EAIC,EACYC,mBAAS,IADrB,mBACXC,EADW,KACFC,EADE,KAEVC,EAAYL,EAAZK,QACR,OACE,yBAAKC,UAAWD,EAAQV,OACtB,kBAACY,EAAA,EAAD,CAAYD,UAAWD,EAAQhB,OAA/B,uCAGA,kBAACmB,EAAA,EAAD,CACEC,QAAQ,WACRC,GAAG,6BACHC,MAAM,sBACNC,WAAS,EACTC,QAAQ,KACRC,KAAK,KACLC,MAAOZ,EACPa,SAAU,SAACC,GAAD,OAAOb,EAAWa,EAAEC,OAAOH,QACrCT,UAAWD,EAAQb,kBACnBE,OAAO,WAET,kBAACc,EAAA,EAAD,CACEC,QAAQ,WACRC,GAAG,8BACHC,MAAM,SACNC,WAAS,EACTC,QAAQ,KACRC,KAAK,KACLC,OA/BWd,EA+BME,EA9BjB,GAAN,OAAUF,EAAOkB,QAAQ,OAAO,SAAAC,GAAC,OAAIA,EAAE,GAAGC,iBAAeF,QAAQ,SAAvD,OAAyEA,QAAQ,SAAjF,QA+BJb,UAAWD,EAAQb,kBACnBE,OAAO,eC3BK4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,oBCTAC,EAAQC,YAAe,CAC3BC,QAAS,CACPC,QAAS,CACPC,KAAM,WAERC,UAAW,CACTC,MAAO,UACPF,KAAM,UACNG,aAAc,YAGlBC,WAAY,CACV1C,WAAY,iBAKhB2C,IAASC,OACP,kBAACC,EAAA,EAAD,CAAkBX,MAAOA,GACvB,kBAAC,EAAD,OACmBY,SAASC,eAAe,SDoGzC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.7a9e9780.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState } from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport { withStyles, TextField, Typography } from '@material-ui/core';\r\n\r\n\r\nfunction translate(string){\r\n  return `${string.replace(/-./g, c => c[1].toUpperCase()).replace(/(: *)/g, `: \\``).replace(/( *;)/g, `\\`,`)}`;\r\n}\r\n\r\nfunction App(props) {\r\n  const [CSSCode, setCSSCode] = useState('');\r\n  const { classes } = props;\r\n  return (\r\n    <div className={classes.paper}>\r\n      <Typography className={classes.title}>\r\n        CSS to Material-UI Style Translator\r\n      </Typography>\r\n      <TextField\r\n        variant=\"outlined\"\r\n        id=\"translator-multiline-input\"\r\n        label=\"Paste your CSS here\"\r\n        multiline\r\n        rowsMax=\"20\"\r\n        rows=\"20\"\r\n        value={CSSCode}\r\n        onChange={(e) => setCSSCode(e.target.value)}\r\n        className={classes.cssMultilineInput}\r\n        margin=\"normal\"\r\n        />\r\n      <TextField\r\n        variant=\"outlined\"\r\n        id=\"translator-multiline-output\"\r\n        label=\"Output\"\r\n        multiline\r\n        rowsMax=\"20\"\r\n        rows=\"20\"\r\n        value={translate(CSSCode)}\r\n        className={classes.cssMultilineInput}\r\n        margin=\"normal\"\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default withStyles({\r\n  title: {\r\n    width: '100%',\r\n    fontSize: '2em',\r\n  },\r\n\r\n  cssMultilineInput: {\r\n    fontFamily: 'Inconsolata',\r\n    width: '40%',\r\n    margin: '10px 3%',\r\n  },\r\n  paper: {\r\n    backgroundColor: '#f2fffd',\r\n    width: '100%',\r\n    height: '100vh',\r\n    textAlign: 'center',\r\n    overflow: 'hidden',\r\n  }\r\n})(App);\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n// import { ThemeProvider } from '@material-ui/styles';\r\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\r\n\r\n\r\nconst theme = createMuiTheme({\r\n  palette: {\r\n    primary: {\r\n      main: '#ff4400',\r\n    },\r\n    secondary: {\r\n      light: '#0066ff',\r\n      main: '#0044ff',\r\n      contrastText: '#ffcc00',\r\n    },\r\n  },\r\n  typography: {\r\n    fontFamily: 'Inconsolata',\r\n  }\r\n});\r\n\r\n\r\nReactDOM.render(\r\n  <MuiThemeProvider theme={theme}>\r\n    <App />\r\n  </MuiThemeProvider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}